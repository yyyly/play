#ifndef _DHPLAY_H
#define _DHPLAY_H

#if (defined(WIN32) || defined(WIN64))
        #ifdef dhplay_EXPORTS
                #define PLAYSDK_API __declspec(dllexport)
        #else
                #define PLAYSDK_API __declspec(dllimport)
        #endif
        #define CALLMETHOD __stdcall
        #define CALLBACK   __stdcall
#else
        #define CALLMETHOD
        #define CALLBACK
        #define PLAYSDK_API //extern "C"
#endif

#if defined(WIN32) || defined(WIN64)
#include <windows.h>
#else
#ifdef __OBJC__
#include "objc/objc.h"
#else
#define BOOL        int
#endif
#define BYTE		unsigned char
#define PBYTE		BYTE*
#define LPBYTE		BYTE*
#ifndef LONG
#define LONG		int
#endif
#ifndef DWORD
#define DWORD		unsigned int
#endif
#define WORD		unsigned short
#define COLORREF	DWORD
#define HDC			void*
#define HWND		void*
#define LPSTR		char*
#define UINT		unsigned int
#define TRUE		1
#define FALSE		0
#define ULONGLONG	unsigned long long
#define LONGLONG	long long

typedef struct _SYSTEMTIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;
#endif

#ifdef	__cplusplus
extern "C" {
#endif

/***********************************************************************************************/
/* ????????																					   */
/***********************************************************************************************/

/* ????? */
#define  FUNC_MAX_PORT					511		// ????????????????¦¶[0,512)

/* ?????? */
#define MIN_WAVE_COEF					-100	// PLAY_AdjustWaveAudio???
#define MAX_WAVE_COEF					100		// PLAY_AdjustWaveAudio???

/* ?????????? */
#define MIN_AUDIO_RECORD_LEN			320		// ??§³??????????
#define MAX_AUDIO_RECORD_LEN			4096	// ??????????????

/* ??????? */
#define MAX_DISPLAY_WND					64      // ???????????????????

/* ??????????? */
#define BUF_VIDEO_SRC					1		// ????????
#define BUF_AUDIO_SRC					2		// ????????
#define BUF_VIDEO_RENDER				3		// ????????????????
#define BUF_AUDIO_RENDER				4		// ????????????????

/* ????????? */
#define BY_FRAMENUM						1		// ???????(PLAY_GetKeyFramePos???)
#define BY_FRAMETIME					2		// ??????(PLAY_GetKeyFramePos???)

/* ?????????? */
#define SOURCE_BUF_MAX					1024*100000	// ??????????????????
#define SOURCE_BUF_MIN					1024*1024	// ??????????????§³????

#define STREAME_REALTIME				0		// ??????
#define STREAME_FILE					1		// ???????

/* ???¦Ë?? */
#define T_AUDIO16						101		// 16¦Ë???????????
#define T_AUDIO8						100		// 8¦Ë???????????

/* ?????????????? */
#define T_UYVY							1		// UYVY?????YUV?????????????
#define T_IYUV							3		// IYUV(I420)????YUV????
#define T_RGB32							7		// RGB32?????????????

/* avi??? */
#define AVI_MEDIACHANGE_FRAMERATE		1		// ?????
#define AVI_MEDIACHANGE_RESOLUTION		2		// ???????

/* ?????? */
#define WATERMARK_DATA_TEXT				0		// ????
#define WATERMARK_DATA_JPEG_BMP			1		// JPEG????BMP??
#define WATERMARK_DATA_FRAMEDATA		3		// ?????

/* ?????? */
#define  DH_PLAY_NOERROR							0	//?????
#define  DH_PLAY_COMMON_ERROR						1	//???????
#define	 DH_PLAY_PARA_INVALID						2	//??????§¹
#define  DH_PLAY_ORDER_ERROR						3	//?????????
#define	 DH_PLAY_PORT_OPEN							4	//????????????
#define	 DH_PLAY_PORT_CLOSE							5	//???????????
#define	 DH_PLAY_PORT_INVALID						6	//???????§¹
#define	 DH_PLAY_PORT_EXIST							7	//??????????
#define  DH_PLAY_OPEN_FILE_ERROR					8	//??????????
#define  DH_PLAY_INTERFACE_NOT_SUPPORT				9	//???????
#define  DH_PLAY_HWND_INVALID						10	//?????????§¹
#define  DH_PLAY_PLAY_ERROR							11	//???????
#define  DH_PLAY_SPEED_INVALID						12	//?????§¹
#define  DH_PLAY_NOT_FILE							13	//???????
#define  DH_PLAY_NOT_STREAM							14	//??????
#define  DH_PLAY_NO_FRAME							15	//???????????
#define  DH_PLAY_INDEX_NOT_COMPLETE					16	//??????§ß???????
#define  DH_PLAY_INDEX_COMPLETE						17	//????????????
#define  DH_PLAY_GET_FILE_SIZE_ERROR				18	//????????§³???
#define  DH_PLAY_CREATE_THREAD_FAIL					19	//??????????
#define  DH_PLAY_CREATE_EVENT_FAIL					20	//???????????
#define  DH_PLAY_SOUND_SHARE_MODE					21	//?????????????
#define  DH_PLAY_INCLUDE_SOUND_SHARE_PORT			22	//?????????
#define  DH_PLAY_NOT_INCLUDE_SOUND_SHARE_PORT		23	//????¦Ä????
#define  DH_PLAY_CREATE_DIR_ERROR					24	//????¡¤?????
#define  DH_PLAY_CREATE_FILE_ERROR					25	//??????????

#define  DH_PLAY_CONVERT_YUV_ERROR					26	//???yuv???
#define  DH_PLAY_CONVERT_JPG_ERROR					27	//???jpg???
#define  DH_PLAY_CONVERT_BMP_ERROR					28	//???bmp???
#define  DH_PLAY_CONVERT_TIFF_ERROR					29	//???tiff???
#define  DH_PLAY_HW_CATCH_ERROR					    30	//???????????
#define  DH_PLAY_CREATE_VIDEO_RENDER_ERROR			31	//?????????????
#define  DH_PLAY_NOT_SUPPORT_REF_VALUE				32	//???????????????
#define  DH_PLAY_FORMAT_NOT_SUPPORT					33	//????????
#define  DH_PLAY_CREATE_RECORD_ERROR				34	//??????????
#define  DH_PLAY_OPEN_RECORD_ERROR					35	//??????????
#define  DH_PLAY_FRAMERATE_ERROR					36	//??????
#define  DH_PLAY_CREATE_AUDIO_RECORD_ERROR			37	//?????????????
#define  DH_PLAY_OPEN_AUDIO_RECORD_ERROR			38	//?????????????
#define	 DH_PLAY_AES_ALLOC_ERROR					39	//????aes_alloc???

#define  DH_PLAY_BUF_OVER				            40  //??????????
#define  DH_PLAY_ALLOC_MEMORY_ERROR		            41  //??????????


/***********************************************************************************************/
/* ??????																					   */
/***********************************************************************************************/

/* ????? */
typedef enum
{
        RENDER_NOTSET = 0,				// ¦Ä????
        RENDER_GDI,						// GDI???
        RENDER_X11 = RENDER_GDI,		// ??windows??X11???
        RENDER_DDRAW,					// ddraw???
        RENDER_OPENGL = RENDER_DDRAW,	// ??windows??opengl???
    RENDER_D3D,						// d3d???
        RENDER_WGL						// windows??opengl???
}RenderType;

/* ?????? */
typedef enum
{
        DECODE_NOTSET = 0,		// ¦Ä????
        DECODE_SW,				// ????
        DECODE_HW,				// ?????????
        DECODE_HW_FAST,			// ?????????????
        DECODE_MSDK				// ?????????intel media sdk???????
}DecodeType;

/* ????? */
typedef enum __tPicFormats
{
        PicFormat_BMP = 0,				        // BMP32????
        PicFormat_JPEG,							// JPEG????
        PicFormat_JPEG_70,						// 70%??????JPEG????
        PicFormat_JPEG_50,						// 50%??????JPEG????
        PicFormat_JPEG_30,						// 30%??????JPEG????
        PicFormat_JPEG_10,						// 10%??????JPEG????
        PicFormat_BMP24,                        // BMP24????
        PicFormat_TIFF							// TIFF????
} tPicFormats;

/* ???????????? */
typedef enum _CMD_TYPE
{
        PLAY_CMD_GetTime = 1,			// ?????????????????????????
        PLAY_CMD_GetFileRate = 2,		// ??????
        PLAY_CMD_GetMediaInfo = 3,		// ??????
        PLAY_CMD_GetRenderNum = 4,		// ????????????
        PLAY_CMD_GetRenderTime = 5,		// ???????????????????
        PLAY_CMD_GetSrcTime	= 6,		// ???????????????1970??7??1???????????????
        PLAY_CMD_GetCurRenderNum = 7,   // ???????PLAY_CMD_GetRenderNum???????????
    PLAY_CMD_GetRenderTimeStamp = 8 // ?????????????????????????
} CMD_TYPE_E;

/* ???????????? */
typedef enum
{
        AV_SYNC_VIDEO_MASTER,		  // ??????????????????????????
        AV_SYNC_AUDIO_TIME_STAMP      // ??????????????
}AV_SYNC_TYPE;

/***********************************************************************************************/
/* ??????																				   */
/***********************************************************************************************/

/* ?????????? */
typedef struct _tagRECT
{
        LONG left;
        LONG top;
        LONG right;
        LONG bottom;
}DISPLAYRECT;

/* ????? */
#ifndef _DHTIME_
#define _DHTIME_
typedef struct _DHTIME
{
        DWORD second	:6;						//	??	0-59
        DWORD minute	:6;						//	??	0-59
        DWORD hour		:5;						//	?	0-23
        DWORD day		:5;						//	??	1-31
        DWORD month		:4;						//	??	1-12
        DWORD year		:6;						//	??	2000-2063
} DHTIME,*pDHTIME;
#endif

/* ????????????????? */
typedef struct _FILE_INFO
{
        UINT		channel;				// ?????
        BYTE		alarm;					// ????????
        BYTE		lock_flag;				// ????????(0¦Ä???? 1??? 2???)
        BYTE		video_audio;			// ????????
        BYTE		image;					// ???????(bit4~6?????? bit7 ????????)
        BYTE		hint;					// ??????????????????
        DHTIME		start_time;				// ??????
        DHTIME		end_time;				// ???????
        UINT		file_length;			// ??????????¦Ë?KB
        UINT		disk_no;				// ?????????
        UINT		disk_part;				// ????????
        UINT		first_clus_no;			// ???????
        UINT		ud_no;					// ????????
        BYTE		base_name[24];			// ?????
        BYTE		ext_name[4];			// ?????
        UINT		checked;				// ?????§µ????????????
}FILE_INFO,*pFILE_INFO;

/* ?¦Ë????? */
typedef struct
{
        LONGLONG		nFilePos;				// ??????????§Ö????¦Ë??
        LONG			nFrameLen;				// ?????
        LONG			nFrameNum;				// ?????
        LONG			nFrameTime;				// ????
        LONG			nErrorFrameNum;			// ?????????????
        SYSTEMTIME*		pErrorTime;				// ?????????????
        LONG			nErrorLostFrameNum;		// ?????????????
        LONG			nErrorFrameSize;		// ?????????????
}FRAME_POS,*PFRAME_POS;

/* ???? */
typedef struct
{
        LONG			nWidth;					// ??????????¦Ë?????????????????????0
        LONG			nHeight;				// ???????????????????????0
        LONG			nStamp;					// ??????????¦Ë????
        LONG			nType;					// ?????????T_AUDIO16??T_RGB32??T_IYUV
        LONG			nFrameRate;				// ??????????????????????
}FRAME_INFO;

/* ?????????? */
typedef struct
{
        #define FRAME_TYPE_VIDEO 0				// ????
        #define FRAME_TYPE_AUDIO 1				// ????
        int				nFrameType;				// ??????????????ÕÇ??
        int				nFrameSeq;				// ?????
        int				nStamp;					// ??????????¦Ë????
        int				nWidth;					// ??????????¦Ë?????????????????????0
        int 			nHeight;				// ???????????????????????0
        int				nFrameRate;				// ?????????????????
        int				nChannels;				// ????????
        int				nBitPerSample;			// ???????¦Ë??
        int				nSamplesPerSec;			// ??????????
        int				nRemainData;			// ?????????????
        SYSTEMTIME		nDataTime;				// ???
        int				nFrameSubType;			// ??????????
        int				nReserved[58];			// ???????
}FRAME_INFO_EX;

/* ???????????? */
typedef struct
{
        int				nFrameType;					// ????????????FRAME_INFO_EX??nFrameType???
        void*			pAudioData;				    // ??????????????????
        int				nAudioDataLen;			    // ??????????
        void*			pVideoData[3];			    // ???????????YUV????????
        int				nStride[3];				    // ??????YUV?????????????
        int				nWidth[3];				    // ??????YUV?????????????
        int				nHeight[3];					// ??????YUV????????????
        int				nReserved[64];				// ???????
}FRAME_DECODE_INFO;

/* ?????? */
typedef struct
{
        int			lWidth;					//	??????????¦Ë????
        int			lHeight;				//	??????
        int			lFrameRate;				//	???
        int			lChannel;				//	????????
        int			lBitPerSample;			//	???????¦Ë??
        int			lSamplesPerSec;			//	??????????
}MEDIA_INFO;

/***********************************************************************************************/
/* ???																						   */
/***********************************************************************************************/

/************************************************************************/
//> ????·Ú??
/************************************************************************/

/**
 * ????????SDK???·Ú?????·Ú???SVN?·Ú???
 *
 * @return ????1¦Ë???????????·Ú?????2~3¦Ë?????·Ú???????????SVN?·Ú???
 *         ?»Ç?????34033722????????·Ú????3????·Ú????40??SVN?·Ú????33722??
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetSdkVersion();

/************************************************************************/
//> ??????
/************************************************************************/

/**
 * ?????????
 *
 * @return ??????
 */
PLAYSDK_API DWORD  CALLMETHOD PLAY_GetLastErrorEx();

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ???????????????Warn????????????????????????????????????????Debug?????
 * Windows?????????????????playsdk.log???????????windows???????????
 *
 */
typedef enum
{
    LOG_LevelUnknown= 0, // ¦Ä????
    LOG_LevelFatal,	     // fatal????????????????????????????????fatal??????????
    LOG_LevelError,	     // error?????????????????????????????????fatal??error??????????
    LOG_LevelWarn,	     // warn?????????????????????????????????fatal??error??warn??????????
    LOG_LevelInfo,	     // info?????????????????????????????????fatal??error??warn??info??????????
    LOG_LevelTrace,	     // Trace?????????????????????????????????fatal??error??warn??info??trace??????????
    LOG_LevelDebug	     // Debug???????????????????????????????fatal??error??warn??info??trace??debug??????????
}LOG_LEVEL;
PLAYSDK_API void CALLMETHOD PLAY_SetPrintLogLevel(LOG_LEVEL logLevel);

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ???????????????¦¶??101~511??
 *
 * @param[out] plPort ???????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetFreePort(LONG *plPort);

/**
 * ?????????
 *
 * @param[in] lPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_ReleasePort(LONG lPort);

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ???????????
 *
 * @param[in] nPort ?????
 * @param[in] sFileName ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_OpenFile(LONG nPort,LPSTR sFileName);

/**
 * ????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_CloseFile(LONG nPort);

/**
 * ????????????????
 *
 * @param[in] nPort ?????
 * @param[in] pUserData ???????
 */
typedef void (CALLBACK *fFileEndCBFun)(DWORD nPort, void* pUserData);

/**
 * ????????????
 *
 * @param[in] nPort ?????
 * @param[out] pFileEndCBFun ?????????????????
 * @param[in] pUserData ???????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetFileEndCallBack(LONG nPort, fFileEndCBFun pFileEndCBFun, void* pUserData);

/************************************************************************/
//> ??????
/************************************************************************/

/**
 * ??????????????
 *
 * @param[in] nPort ?????
 * @param[in] nMode ????????0??????1?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetStreamOpenMode(LONG nPort,DWORD nMode);

/**
 * ???????????
 *
 * @param[in] nPort ?????
 * @return LONG??STREAM_MODE_REALSTREAM??STREAM_MODE_FILESTREAM
 */
PLAYSDK_API LONG CALLMETHOD PLAY_GetStreamOpenMode(LONG nPort);

/**
 * ????????
 *
 * @param[in] nPort ?????
 * @param[in] pFileHeadBuf ????????
 * @param[in] nSize ????????
 * @param[in] nBufPoolSize ???¨°??????§Õ??????????????????§³????¦¶??SOURCE_BUF_MIN~SOURCE_BUF_MAX
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_OpenStream(LONG nPort,PBYTE pFileHeadBuf,DWORD nSize,DWORD nBufPoolSize);

/**
 * ???????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_CloseStream(LONG nPort);

/**
 * ????????????PLAY_Play?????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ??????????????
 * @param[in] nSize ?????????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_InputData(LONG nPort,PBYTE pBuf,DWORD nSize);


/************************************************************************/
//> ????????
/************************************************************************/

/**
 * ?????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_PlaySound(LONG nPort);

/**
 * ???????????????????
 *
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StopSound();

/**
 * ??????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_PlaySoundShare(LONG nPort);

/**
 * ????????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StopSoundShare(LONG nPort);

/**
 * ??????????
 *
 * @param[in] nPort ?????
 * @param[in] nVolume ?????????¦¶0-0xFFFF
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetVolume(LONG nPort,WORD nVolume);

/**
 * ?????????
 *
 * @param[in] nPort ?????
 * @return WORD???????
 * @note ????????????????????????????????????????????????¨¢?
 */
PLAYSDK_API WORD CALLMETHOD PLAY_GetVolume(LONG nPort);

/**
 * ??????????????????
 *
 * @param[in] pDataBuffer ??????
 * @param[in] DataLength ???????
 * @param[in] pUserData ???????
 */
typedef void (CALLBACK *pCallFunction)(LPBYTE pDataBuffer, DWORD DataLength, void* pUserData);

/**
 * ???????????????
 *
 * @param[in] pProc???????????????
 * @param[in] nBitsPerSample ???????¦Ë??
 * @param[in] nSamplesPerSec ?????????
 * @param[in] nLength ???????????????¦¶320-4096
 * @param[in] encodetype ??????????§Ò????????0??pcm??1??g711a??2??g711u??pcm??????????g711a??g711u?????????????????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_OpenAudioRecord(pCallFunction pProc, LONG nBitsPerSample, LONG nSamplesPerSec, LONG nLength, LONG encodetype, void* pUserData);

/**
 * ??????????????
 *
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_CloseAudioRecord();

/**
 * ???????????????????
 *
 * @param[in] fRatio ?????????????0§³??1??????§³??1????????????1???????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetAudioRecScaling(float fRatio);

/**
 * ??????????????????
 *
 * @param[out] pfRatio ?????????????0§³??1??????§³??1????????????1???????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetAudioRecScaling(float* pfRatio);

/**
 * ????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] fRatio ?????????????0§³??1??????§³??1????????????1?????????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetAudioRenderScaling(LONG nPort, float fRatio);

/**
 * ???????????????????
 *
 * @param[in] nPort ?????
 * @param[out] pfRatio ?????????????0§³??1??????§³??1????????????1???????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetAudioRenderScaling(LONG nPort, float* pfRatio);

/**
 * ????WAVE???¦²??????????????§³??????PLAY_SetVolume?????????????????????????????¡¤?????????PLAY_SetVolume??
 * ?????????????? ?????????????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] nCoefficient ??????????0?????????????????¦¶??MIN_WAVE_COEF??MAX_WAVE_COEF???????MIN_WAVE_COEF??
 *                         ???????????????MAX_WAVE_COEF???????????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_AdjustWaveAudio(LONG nPort,LONG nCoefficient);

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ??????????????????????????????§³??????hWnd??????????????????????hWnd?????????????????????????????????????
 * ??????NULL???????????????????????
*
* @param[in] nPort ?????
* @param[in] hWnd ???????????????
* @return BOOL?????????TURE????????FALSE
* @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_Play(LONG nPort, HWND hWnd);

/**
 * ???????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_Stop(LONG nPort);

/**
 * ???/????????
 *
 * @param[in] nPort ?????
 * @param[in] nPause 1???????0?????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_Pause(LONG nPort,DWORD nPause);

/**
 * ??????????¦Å?????????????????????????????????????PLAY_Play()??????¦Ë?????????????
 * ????????¦¶?[1/64,64]??
 *
 * @param[in] nPort ?????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_Slow(LONG nPort);

/**
 * ??????????¦Å?????????????????????????????????????PLAY_Play()??????¦Ë??????????
   ????????????????????????????????????????????????????????????????
 * ????????¦¶?[1/64, 64]??
 *
 * @param[in] nPort ?????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_Fast(LONG nPort);

/**
 * ???????????????????????PLAY_ Play??
 *
 * @param[in] nPort ?????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_OneByOne(LONG nPort);

/**
 * ???????????????????????PLAY_ Play?????????????????????????????????????????¨¢?
 *
 * @param[in] nPort ?????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_OneByOneBack(LONG nPort);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @param[in] nRegionNum ??????????????????????????(???????)???0
 * @param[in] nBrightness ????????64????¦¶0-128
 * @param[in] nContrast ????????64????¦¶0-128
 * @param[in] nSaturation ?????????64????¦¶0-128
 * @param[in] nHue ????????64????¦¶0-128
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetColor(LONG nPort, DWORD nRegionNum, int nBrightness, int nContrast, int nSaturation, int nHue);

/**
 * ????????????
 *
 * @param[in] nPort ?????
 * @param[in] nRegionNum ???????
 * @param[out] pBrightness ????
 * @param[out] pContrast ????
 * @param[out] pSaturation ?????
 * @param[out] pHue ???
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetColor(LONG nPort, DWORD nRegionNum, int *pBrightness, int *pContrast, int *pSaturation, int *pHue);

/**
 * ?????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nAVSyncType ??????????????AV_SYNC_TYPE
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetAVSyncType(LONG nPort,AV_SYNC_TYPE nAVSyncType);

/**
 * ?????????????????1?????????????????
 *
 * @param[in] nPort ?????
 * @param[in] fCoff ??????????¦¶??1/64-64????????????????????????????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPlaySpeed(LONG nPort, float fCoff);

/**
 * ???¨°????????
 *
 * @param[in] nPort ?????
 * @param[in] emDirection ?????????0???????1??????
 * @return ???????TURE????????FALSE??
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPlayDirection(LONG nPort, DWORD emDirection);

/**
 * ?????????????[nDelay,nThreshold]??§³??nDelay????????????nThreshold????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nDelay(ms) ??????????????????????????§³?????????????
 * @param[in] nThreshold(ms) ??????????§³??????????????????????????????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDelayTime(LONG nPort, int nDelay, int nThreshold);

/**
 * ???¨°????????????????§¹??
 *
 * @param[in] nPort ?????
 * @param[in] nStartTime(ms) ??????????
 * @param[in] nSlowTime(ms) ??????????§³??????????????????????????????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPlayMethod(LONG nPort, int nStartTime, int nSlowTime, int nFastTime, int nFailedTime);

/**
 * ?????????????????????????????????PLAY_PlaySound???????
 *
 * @param[in] nPort ?????
 * @param[in] nClearTime(ms) ???????????
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetAudioPlayMethod(LONG nPort, int nClearTime);

/**
 * ??????????????¦¶0-3??
 *
 * @param[in] nPort ?????
 * @param[in] nrotateType ????????0?????????1?????90???2?????180???3?????270??
 * @return ???????TURE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetRotateAngle(LONG nPort , int nrotateType);

/************************************************************************/
//> ?????¦Ë
/************************************************************************/

/**
 * ????????????????????¦Ë??(????)??
 *
 * @param[in] nPort ?????
 * @param[in] fRelativePos ???????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPlayPos(LONG nPort,float fRelativePos);

/**
 * ???????????????????¦Ë??(????)??
 *
 * @param[in] nPort ?????
 * @return float??????????????????¦Ë?????¦¶0-100%
 */
PLAYSDK_API float CALLMETHOD PLAY_GetPlayPos(LONG nPort);

/**
 * ?????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nTime ???????????¦Ë???????????¦Ë????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPlayedTimeEx(LONG nPort,DWORD nTime);

/**
 * ????????????????
 *
 * @param[in] nPort ?????
 * @return DWORD??????????????????¦Ë????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetPlayedTimeEx(LONG nPort);

/**
 * ?????????????????PLAY_GetPlayedFrames???????????????????????
 * ????¦Ë?¨°???????????????????????????¡Â??????????????????
 * ?????
 *
 * @param[in] nPort ?????
 * @return DWORD???????????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetCurrentFrameNum(LONG nPort);

/**
 * ??????????????????????????????????????????????????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] nFrameNum ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetCurrentFrameNum(LONG nPort,DWORD nFrameNum);

/**
 * ??????????????
 *
 * @param[in] nPort ?????
 * @return DWORD????????????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetPlayedFrames(LONG nPort);

/**
 * ????????????????
 *
 * @param[in] nPort ?????
 * @return DWORD??????????????????¦Ë??
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetPlayedTime(LONG nPort);

/**
 * ???????????
 *
 * @param[in] nPort ?????
 * @return DWORD??????????????????¦Ë??
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetFileTime(LONG nPort);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @return DWORD??????§Ö??????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetFileTotalFrames(LONG nPort);

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ?????????????????
 *
 * @param[in] nPort ?????
 * @param[in] pUserData ????????????
 */
typedef void(CALLBACK *fFileRefDoneCBFun)(DWORD nPort, void* pUserData);

/**
 * ??????????????????????????????????????????????????????????
 * ?????40M??????????????????????????????????????????????
 * ?????????????????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[out] pFileRefDoneCBFun ??????????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetFileRefCallBack(LONG nPort,
                                                                                                        fFileRefDoneCBFun pFileRefDoneCBFunc,
                                                                                                        void* pUserData);
/**
 * ?????????????????
 *
 * @param[in] nPort ?????
 * @param[in] bIndexCreated ?????????????TRUE?????????????FALSE???
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK *fFileRefDoneCBFunEx)(DWORD nPort, BOOL bIndexCreated, void* pUserData);

/**
 * ??????????????????????????????????????????????????????????
 * ?????40M??????????????????????????????????????????????
 * ?????????????????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[out] pFileRefDoneCBFunEx ??????????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetFileRefCallBackEx(LONG nPort, fFileRefDoneCBFunEx pFileRefDoneCBFunEx, void* pUserData);

/**
 * ???????¦Ë?????????¦Ë???????????????????????????????????
 * ?????????????????????????????????????????????????
 * ?????????????§Ö?????????????????????????????????¦Ë??
 * ????????????????3????????????????????????????????
 * PLAY_GetNextKeyFramePos??????????????????????????????????????
 * ???????????§Û??
 *
 * @param[in] nPort ?????
 * @param[in] nValue ???¦Ë????????????????????????nType???
 * @param[in] nType ???nValue???????????nType??BY_FRAMENUM????nValue???????nType??BY_FRAMTIME????nValue????????¦Ëms??
 * @param[in] pFramePos ???????????????¦Ë??????????????PFRAME_POS??
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetKeyFramePos(LONG nPort,DWORD nValue, DWORD nType, PFRAME_POS pFramePos);

/**
 * ???????¦Ë??????????¦Ë?¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] nValue ???¦Ë????????????????????????nType???
 * @param[in] nType ???nValue???????????nType??BY_FRAMENUM,??nValue???????nType??BY_FRAMTIME,??nValue??????,??¦Ëms??
 * @param[in] pFramePos ???????????????¦Ë??????????????PFRAME_POS??
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetNextKeyFramePos(LONG nPort,DWORD nValue, DWORD nType, PFRAME_POS pFramePos);

/**
 * ?????????????????¦Ä?????????????????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuffer ???????
 * @param[in/out] pSize ????pBuffer???§³???????????????§³???????????????pSize=0??pBuffer=NULL??
 *                  ??pSize??????????????????????§³???????????????ÈÉ???????¦±?
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetRefValue(LONG nPort,BYTE *pBuffer, DWORD *pSize);

/**
 * ????????????????????????????????????????????????????????????
 * ???????????????????????PLAY_SetFileRefCallBackEx??????????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuffer ???????
 * @param[in] pSize ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetRefValue(LONG nPort,BYTE *pBuffer, DWORD nSize);

/************************************************************************/
//> ???????????????
/************************************************************************/

/**
 * ???????????????????PLAY_Play?????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] nStream 1 ???????2 ???????3 ??????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDecCBStream(LONG nPort,DWORD nStream);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @param[in] pFrameDecodeInfo ?????????????????
 * @param[in] pFrameInfo ?????????????????¦Ì?FRAME_INFO????
 * @param[in] pUser ????????????
 */
typedef void (CALLBACK* fCBDecode)(LONG nPort, FRAME_DECODE_INFO* pFrameDecodeInfo, FRAME_INFO_EX* pFrameInfo, void* pUser);

/**
 * ?????????????????????§Ö???????????????????????????¨²?????
 * PLAY_Play?????????PLAY_Stop?????§¹????¦Å???PLAY_Play??
 * ??????????¨¢??????????????????????????????§Ù??????????
 * ??????????????????????????????????????¦±?
 *
 * @param[in] nPort ?????
 * @param[out] cbDec ???????????????????NULL
 * @param[in] pUser ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDecodeCallBack(LONG nPort, fCBDecode cbDec, void* pUser);

/**
 * ??????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ???????????
 * @param[in] nSize ????????????§³
 * @param[in] nWidth ??????????¦Ë????
 * @param[in] nHeight ?????????¦Ë????
 * @param[in] nStamp ??????????¦Ë????
 * @param[in] nType ?????????T_RGB32??T_UYVY?????????????
 * @param[in] nReceaved ???????????????
 */
typedef void (CALLBACK* fDisplayCBFun)(LONG nPort,char * pBuf,LONG nSize,LONG nWidth,LONG nHeight,LONG nStamp,LONG nType, void* pReserved);

/**
 * ???????????????????????????????????????????????NULL???¨²??????????¦Ê???????¨¢?
 *
 * @param[in] nPort ?????
 * @param[out] DisplayCBFun ????????????????NULL
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDisplayCallBack(LONG nPort, fDisplayCBFun DisplayCBFun, void* pUserData);

/**
 * ???????????WAVE????????????
 *
 * @param[in] nPort ?????
 * @param[in] pAudioBuf wave??????????
 * @param[in] nSize ??????????
 * @param[in] nStamp ???(ms)
 * @param[in] nType ???????T_AUDIO16?? ??????8000???????????????????16¦Ë???
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK * fAudioCBFun)(LONG nPort, char * pAudioBuf, LONG nSize, LONG nStamp, LONG nType, void* pUserData);

/**
 * ???????????WAVE????????
 *
 * @param[in] nPort ?????
 * @param[out] AudioCBFun ??????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetAudioCallBack(LONG nPort, fAudioCBFun AudioCBFun, void* pUserData);

/**
 * ???????????PLAY_SetDecodeCallBack?????????????????????????????????????????öö?????????????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[out] cbDec ???????????????????NULL
 * @param[in] pUser ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
typedef fCBDecode fVisibleDecodeCallBackFunc;
PLAYSDK_API BOOL CALLMETHOD PLAY_SetVisibleDecodeCallBack(LONG nPort, fVisibleDecodeCallBackFunc cbDec, void* pUser);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ?????????????????
 * @param[in] nSize ?????????????????pBuf?????
 * @param[in] pFrameInfo ?????????????????¦Ì?FRAME_INFO????
 * @param[in] pUserData ????????????
 * @param[in] nReserved2 ????????
 */
typedef void (CALLBACK* fDecCBFun)(LONG nPort,char * pBuf,LONG nSize,FRAME_INFO * pFrameInfo, void* pUserData, LONG nReserved2);

/**
 * ?????????????????????§Ö???????????????????????????¨²?????
 * PLAY_Play?????????PLAY_Stop?????§¹????¦Å???PLAY_Play??
 * ??????????¨¢??????????????????????????????§Ù??????????
 * ??????????????????????????????????????¦±?
 *
 * @param[in] nPort ?????
 * @param[out] DecCBFun ???????????????????NULL
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDecCallBack(LONG nPort, fDecCBFun DecCBFun);

/**
 * ?????????????????????§Ö???????????????????????????¨²?????
 * PLAY_Play?????????PLAY_Stop?????§¹????¦Å???PLAY_Play??
 * ??????????¨¢??????????????????????????????§Ù??????????
 * ??????????????????????????????????????¦±?
 *
 * @param[in] nPort ?????
 * @param[out] DecCBFun ??????????????,?????NULL
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDecCallBackEx(LONG nPort, fDecCBFun DecCBFun, void* pUserData);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ?????????????????
 * @param[in] nSize ?????????????????pBuf?????
 * @param[in] pFrameInfo ????????????,???¦Ì?FRAME_INFO????
 * @param[in] pUserData ????????????
 * @param[in] nReserved1 ????????
 */
typedef void (CALLBACK* fVisibleDecCBFun)(LONG nPort,char * pBuf,LONG nSize,FRAME_INFO * pFrameInfo, void* pUserData, LONG nReserved1);

/**
 * ???????????PLAY_SetDecCallBackEx??????????????????????????????
 * ???????????öö?????????????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[out] DecCBFun ??????????????,?????NULL
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetVisibleDecCallBack(LONG nPort, fVisibleDecCBFun DecCBFun, void* pUserData);

/**
 * ??????????????
 *
 * @param[in] buf ??????buffer???
 * @param[in] key ???????????
 * @param[in] len ????????????
 * @param[in] reallen ????????????
 * @param[in] len ????????????
 * @param[in] reallen ????????????
 * @param[in] type 1??§Õ?????2????????3??????????4????????5????????6?????
 * @param[in] pUserData ????????????
 * @return int ??????
 */
typedef int (CALLBACK* fGetWaterMarkInfoCallbackFunc)(char* buf, LONG key, LONG len, LONG reallen, LONG type, void* pUserData);

/**
 * ???????????????????§µ????????¨²????????§ß????????
 *
 * @param[in] nPort ?????
 * @param[out] pFunc ????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetWaterMarkCallBack(LONG nPort, fGetWaterMarkInfoCallbackFunc pFunc, void* pUserData);

/**
 * ??????????????
 *
 * @param[in] nPort ?????
 * @param[in] buf ?????????
 * @param[in] lTimeStamp ?????????
 * @param[in] lInfoType ?????????,??????????,WATERMARK_DATA_TEXT,WATERMARK_DATA_JPEG_BMP,WATERMARK_DATA_FRAMEDATA
 * @param[in] len ????????????
 * @param[in] reallen ????????????
 * @param[in] lCheckResult 1??§Õ?????2????????3??????????4????????5????????6?????
 * @param[in] pUserData ????????????
 * @return int ??????
 */
typedef int (CALLBACK* fGetWaterMarkInfoCallbackFuncEx)(LONG nPort, char* buf, LONG lTimeStamp, LONG lInfoType, LONG len, LONG reallen, LONG lCheckResult, void* pUserData);

/**
 * ???????????????????§µ????????¨²????????§ß????????
 *
 * @param[in] nPort ?????
 * @param[out] pFunc ????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetWaterMarkCallBackEx(LONG nPort, fGetWaterMarkInfoCallbackFuncEx pFunc, void* pUserData);

/**
 * ?????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK *fEncChangeCBFun)(LONG nPort, void* pUserData);

/**
 * ???????????????????????????????¨¢?
 *
 * @param[in] nPort ?????
 * @param[out] EncChangeCBFun ????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetEncTypeChangeCallBack(LONG nPort, fEncChangeCBFun EncChangeCBFun, void* pUserData);

/**
 * ?????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] pUserData ????????????
 * @param[in] nWidth ?????
 * @param[in] nHeight ?????
 */
typedef void(CALLBACK *fEncChangeCBFunEx)(LONG nPort, void* pUserData,LONG nWidth, LONG nHeight);

/**
 * ???????????????????????????????¨¢?
 *
 * @param[in] nPort ?????
 * @param[out] EncChangeCBFun ????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetEncTypeChangeCallBackEx(LONG nPort, fEncChangeCBFunEx EncChangeCBFun, void* pUserData);

/**
 * ????????
 *
 * @param[in] nPort ?????
 * @param[in] cmdType ?????????????CMD_TYPE_E
 * @param[in] buf ????????????
 * @param[in] buflen ???á½??
 * @param[out] returnlen ????????????§¹???????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_QueryInfo(LONG nPort, int cmdType, char* buf, int buflen, int* returnlen);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @param[out] pBitRate ?????????????????????(??¦Ë?k)
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetRealFrameBitRate(LONG nPort, double* pBitRate);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @return DWORD???????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetCurrentFrameRate(LONG nPort);

/**
 * ?????????????????§³???????????????????????????????????????§³??????????????????????????????????
 * ????????????§»?????????????????????????¨¢?
 *
 * @param[in] nPort ?????
 * @param[out] pWidth ?????
 * @param[out] pHeight ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetPictureSize(LONG nPort,LONG *pWidth,LONG *pHeight);

/**
 * ?????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ???????
 * @param[in] nSize ???????
 * @param[in] pMutexInfo ????,???DEMUX_INFO??
 * @param[in] pMutexInfoEx ????????????????DemuInfoEx??
 * @param[in] pUserData ????????????
 */
/* Demux????? */
typedef enum
{
        FRAME_UNKNOWN = 0,			// ?????????
        FRAME_VIDEO,				// ???????????
        FRAME_AUDIO,				// ???????????
        FRAME_DATA					// ????????????
}FRAME_TYPE;

/* Demux??????? */
typedef enum
{
        FRAME_SUB_TYPE_DATA_INVALID = 0,			// ??????§¹
        FRAME_SUB_TYPE_VIDEO_I_FRAME = 1,			// I?
        FRAME_SUB_TYPE_VIDEO_P_FRAME,				// P?
        FRAME_SUB_TYPE_VIDEO_B_FRAME,				// B?

        FRAME_SUB_TYPE_VIDEO_SMART_I_FRAME = 19,	// smart I?
        FRAME_SUB_TYPE_VIDEO_SMART_P_FRAME, 		// smart P?

        FRAME_SUB_TYPE_DATA_CIPHER_AUXILIARY = 26 	// ???????
}FRAME_SUB_TYPE;

/* Demux?????????? */
typedef enum
{
        ENCODE_VIDEO_UNKNOWN = 0,		// ???????????????
        ENCODE_VIDEO_MPEG4,				// ????????????MPEG4
        ENCODE_VIDEO_HI_H264,			// ??????????????H264
        ENCODE_VIDEO_JPEG,				// ??????????????JPEG
        ENCODE_VIDEO_DH_H264,			// ???????????????????H264
        ENCODE_VIDEO_JPEG2000 = 6,		// ??????????????JPEG2000
        ENCODE_VIDEO_AVS = 7,			// ??????????????AVS
        ENCODE_VIDEO_STD_H264 = 8,		// ??????????????H264
        ENCODE_VIDEO_MPEG2 = 9,			// ????????????MPEG2
        ENCODE_VIDEO_VNC = 10,			// ????????????VNC
        ENCODE_VIDEO_SVAC = 11,			// ????????????SVAC
        ENCODE_VIDEO_DH_H265 = 12		// ????????????H265
}ENCODE_VIDEO_TYPE;

/* Demux?????????? */
typedef enum
{
        ENCODE_AUDIO_UNKNOWN = 0,
        ENCODE_AUDIO_PCM = 7,			// ????????????PCM8
        ENCODE_AUDIO_G729,				// ????????????G729
        ENCODE_AUDIO_IMA,				// ????????????IMA
        ENCODE_PCM_MULAW,				// ????????????PCM MULAW
        ENCODE_AUDIO_G721,				// ????????????G721
        ENCODE_PCM8_VWIS,				// ????????????PCM8_VWIS
        ENCODE_MS_ADPCM,				// ????????????MS_ADPCM
        ENCODE_AUDIO_G711A,				// ????????????G711A
        ENCODE_AUDIO_AMR,				// ????????????AMR
        ENCODE_AUDIO_PCM16,				// ????????????PCM16
        ENCODE_AUDIO_G711U = 22,		// ????????????G711U
        ENCODE_AUDIO_G723 = 25,			// ????????????G723
        ENCODE_AUDIO_AAC,				// ????????????AAC
        ENCODE_AUDIO_G726_40,           // ????????????G726, 40kbps
        ENCODE_AUDIO_G726_32,           // ????????????G726, 32kbps
        ENCODE_AUDIO_G726_24,           // ????????????G726, 24kbps
        ENCODE_AUDIO_G726_16,           // ????????????G726, 16kbps
        ENCODE_AUDIO_MP2,				// ????????????mp2
        ENCODE_AUDIO_OGG,				// ????????????ogg vorbis
        ENCODE_AUDIO_MP3,				// ????????????mp3
        ENCODE_AUDIO_G722_1,		    // ????????????G722_1
        ENCODE_AUDIO_OPUS = 38          // ????????????OPUS
}ENCODE_AUDIO_TYPE;

/* ?????????? */
typedef enum
{
        STREAM_TYPE_UNKNOWN = 0,        // ¦Ä?????
        STREAM_TYPE_MPEG4,              // MPEG4
        STREAM_TYPE_DHPT =3,	        // ????????????DHPT
        STREAM_TYPE_NEW,                // ????????????NEW
        STREAM_TYPE_HB,                 // ????????????HB
        STREAM_TYPE_AUDIO,              // ?????
        STREAM_TYPE_PS,                 // MPEG-2??PS
        STREAM_TYPE_DHSTD,              // ???????????????
        STREAM_TYPE_ASF,                // ASF
        STREAM_TYPE_3GPP,               // 3GP
        STREAM_TYPE_RAW,	            // ??????????????????
        STREAM_TYPE_TS,                 // MPEG-2??TS
        STREAM_TYPE_SVC,                // svc
        STREAM_TYPE_AVI,                // AVI
        STREAM_TYPE_MP4,                // MP4
        STREAM_TYPE_CGI,                // CGI
        STREAM_TYPE_WAV,		        // WAV???
        STREAM_TYPE_FLV,                // FLV

        STREAM_TYPE_MKV,                // mkv
        STREAM_TYPE_RTP,			    // RTP
        STREAM_TYPE_RAW_MPEG4,	        // MPEG4??????
        STREAM_TYPE_RAW_H264,	        // H264??????
        STREAM_TYPE_RAW_H265,	        // H265??????
        STREAM_TYPE_WMV,			    // WMV
        STREAM_TYPE_RAW_MPEG2,	        // MPEG2??????
        STREAM_TYPE_RAW_SVAC,	        // SVAC??????
        STREAM_TYPE_MOV,
        STREAM_TYPE_VOB,			    // VOB
        STREAM_TYPE_RAW_H263,
        STREAM_TYPE_RM,
        STREAM_TYPE_DHPS,		        // DHPS
}STREAM_TYPE;

/* Demux?????? */
typedef struct
{
        char*	pHead;				// ?????(???????)
        int		nLen;				// ????????
        char*	pBody;				// ??????(?????????)
        int		nBodyLen;			// ?????????

        int		nRet;				// 0:???????? 1:??????????0
        BYTE	nEncryptType;		// ?????????0:?????? 1:AES
    BYTE    nRotateAngle;       // ?????????? 0:????? 1:90????? 2:180????? 3:270?????
        char    reserved1[2];
        int     nStreamType;        // ??????????,????STREAM_TYPE????
        char	reserved[120];
}DemuInfoEx;

/* Demux??????? */
typedef struct
{
        int type;			 // ????FRAME_TYPE????
        int subtype;		 // ????FRAME_SUB_TYPE????
        int encode;			 // ????ENCODE_VIDEO_TYPE??ENCODE_AUDIO_TYPE????
        int sequence;		 // ?????
        int width;			 // ?????
        int height;			 // ?????
        int rate;			 // ???
        int year;			 // ?????????
        int month;           // ?????????
        int day;             // ?????????
        int hour;            // ????????
        int minute;          // ?????????
        int secode;          // ?????????
        LONG timestamp;      // ?????????
        int channels;        // ????????
        int bitspersample;   // ???????????
        int samplespersecond;// ?????????
}DEMUX_INFO;

typedef void (CALLBACK* fDemuxDecCBFun)(LONG nPort,char * pBuf,	LONG nSize,void * pMutexInfo,void* pMutexInfoEx, void* pUserData);

/**
 * ?????????????
 *
 * @param[in]  nPort ?????
 * @param[out] DecCBFun ???????????
 * @param[in]  pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDemuxCallBack(LONG nPort, fDemuxDecCBFun DecCBFun, void* pUserData);

/**
 * H264???????????????
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ???????
 * @param[in] nLen ???????
 * @param[in] pUserData ????????????
 */
typedef int (CALLBACK *fH264InfoCBFun)(LONG nPort, char* pBuf, LONG nLen, void* pUserData);

/**
 * ????H264???????????????
 *
 * @param[in]  nPort ?????
 * @param[out] pH264InfoCBFun H264?????????????
 * @param[in]  nUser ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_Set264EncodeInfoCallBack(LONG nPort, fH264InfoCBFun pH264InfoCBFun, void* nUser);

/**
 * ????aes?????????
 *
 * @param[in] nPort ?????
 * @param[in] szKey ????????
 * @param[in] nKeylen ????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetSecurityKey(LONG nPort,const char* szKey,DWORD nKeylen);

/*????????*/
typedef enum
{
        ENCRYPT_UNKOWN = 0,
        ENCRYPT_AES,
        ENCRYPT_AES256,
        ENCRYPT_AES256_GDPR2
}ENCRYPT_TYPE;

//???????
typedef struct
{
        char* Key;              //AES:key??AES256(GDPR???):key?? AES256(GDPR????)?????:vkek
        int KeyLen;
        char* KeyId;       	    //AES:?????? AES256(GDPR???):keyid?? AES256(GDPR????)?????:vkekid
        int KeyIdLen;
        char Reserved[24];      //???????
}DECRYPT_PARAM;

/**
 * ????aes?????????
 *
 * @param[in] nPort ?????
 * @param[in] nType  ????????
 * @param[in] szKey ????????
 * @param[in] nKeylen ????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetSecurityKeyEx(LONG nPort, ENCRYPT_TYPE nType, DECRYPT_PARAM* key, unsigned int key_len);

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ?????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nRegionNum ???????????,0~(MAX_DISPLAY_WND-1),?????0,??????????????????????????
 * @param[in] pSrcRect ??????????
 * @param[in] hDestWnd ??????????
 * @param[in] bEnable ????(????)????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDisplayRegion(LONG nPort,DWORD nRegionNum, DISPLAYRECT *pSrcRect, HWND hDestWnd, BOOL bEnable);

/**
 * ???????????????????????????????????§Ö????????????????
 * ????????????????????¡ã????????????????????????????????
 * ??§µ??????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_RefreshPlay(LONG nPort);

/************************************************************************/
//> ??????????
/************************************************************************/

/**
 *  ????????????????????????????§³(??¦Ë????)??
 *
 * @param[in] nPort ?????
 * @return DWORD?????????????§³??¦ËBYTE(??¦Ë????)
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetSourceBufferRemain(LONG nPort);

/**
 * ???????????????????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_ResetSourceBuffer(LONG nPort);

/**
 * ???????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nBufType???????
 *			BUF_VIDEO_SRC 1 ????????
 *			BUF_AUDIO_SRC 2 ????????
 *			BUF_VIDEO_RENDER 3 ????????????????
 *			BUF_AUDIO_RENDER 4 ????????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_ResetBuffer(LONG nPort,DWORD nBufType);

/**
 * ???????????????§³??
 *
 * @param[in] nPort ?????
 * @param[in] nBufType???????
 *			BUF_VIDEO_SRC 1 ????????
 *			BUF_AUDIO_SRC 2 ????????
 *			BUF_VIDEO_RENDER 3 ????????????????
 *			BUF_AUDIO_RENDER 4 ????????????????
 * @return DWORD???????????????????????????????????byte???????????????????
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetBufferValue(LONG nPort,DWORD nBufType);

/************************************************************************/
//> ???????
/************************************************************************/

/**
 * ????????(Windows32??)??
 *
 * @return UINT?????????????????? ??????0
 */
PLAYSDK_API UINT CALLMETHOD PLAY_InitDisk();

/**
 * ????????????
 *
 * @param[in] nPort ?????
 * @param[in] nPercent ???????, -1?????
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK *fPercentCallbackFunc)(LONG nPort, int nPercent, void* pUserData);

/**
 * ???????????????????????????????????????PLAY_SetFileRefCallBack?????????§¹??[0,0] ????????????§³???????????????????PLAY_OpenFile??????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] nStartTime ????????? ??¦Ë???1970/1/1?????????????
 * @param[in] nEndTime ?????????? ??¦Ë???1970/1/1?????????????
 * @param[out] pFunCallback ?????????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPercentCallBack(LONG nPort, LONG nStartTime, LONG nEndTime, fPercentCallbackFunc pFunCallback, void* pUserData);

typedef enum
{
        FORMAT_ALL_DATA, //????????????
        FORMAT_KEY_DATA  //?????????????
}FormatType;

/**
 * ????????(Windows32??)??
 *
 * @param[in] disk_no ?????????????????
 * @param[in] type ????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_FormatDisk(UINT disk_no, FormatType type);

/**
 * ????????¦Ë(Windows32??)??
 *
 * @param[in] channel ??????????????????
 * @param[in] start_time ?????????????
 * @param[in] end_time ??????????????
 * @param[in/out] pmax_ret_num ????????????????????????????????????????????????????¦Ç???pmax_ret_num??????????
 * @param[out] pfile_info ??????????????????¦Ë??
 * @param[in] type ?????????????????????????????
 * @param[in] hint ????????ÈÉ????????0
 * @param[in] driver_type ????????????????????§»??????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API UINT CALLMETHOD PLAY_QueryFileList(UINT nChannel,DHTIME start_time,DHTIME end_time,UINT *pmax_ret_num,pFILE_INFO pfile_info,UINT type, BYTE hint, UINT driver_type);

/************************************************************************/
//> ????
/************************************************************************/

typedef enum
{
        FISHEYEMOUNT_MODE_INVALID = 0,					// ???????§¹
        FISHEYEMOUNT_MODE_CEIL = 1,						// ???
        FISHEYEMOUNT_MODE_WALL,							// ???
        FISHEYEMOUNT_MODE_FLOOR,						// ???
        FISHEYEMOUNT_MODE_NUM
}FISHEYE_MOUNTMODE;

typedef enum
{
        FISHEYECALIBRATE_MODE_INVALID = 0,							// ????????§¹
        FISHEYECALIBRATE_MODE_OFF = 1,								// ????????????????
        FISHEYECALIBRATE_MODE_ORIGINAL,								// ????(??????),?????????
        FISHEYECALIBRATE_MODE_PANORAMA,								// 1p
        FISHEYECALIBRATE_MODE_PANORAMA_PLUS_ONE_EPTZ,				// 1p+1
        FISHEYECALIBRATE_MODE_DOUBLE_PANORAMA,						// 2p
        FISHEYECALIBRATE_MODE_ORIGINAL_PLUS_DOUBLE_PANORAMA,		// 1+2p
        FISHEYECALIBRATE_MODE_ORIGINAL_PLUS_THREE_EPTZ_REGION,		// 1+3
        FISHEYECALIBRATE_MODE_PANORAMA_PLUS_THREE_EPTZ_REGION,		// 1p+3
        FISHEYECALIBRATE_MODE_ORIGINAL_PLUS_TWO_EPTZ_REGION,		// 1+2
        FISHEYECALIBRATE_MODE_ORIGINAL_PLUS_FOUR_EPTZ_REGION,		// 1+4
        FISHEYECALIBRATE_MODE_PANORAMA_PLUS_FOUR_EPTZ_REGION,		// 1p+4
        FISHEYECALIBRATE_MODE_PANORAMA_PLUS_SIX_EPTZ_REGION,		// 1p+6
        FISHEYECALIBRATE_MODE_ORIGINAL_PLUS_EIGHT_EPTZ_REGION,		// 1+8
        FISHEYECALIBRATE_MODE_PANORAMA_PLUS_EIGHT_EPTZ_REGION,		// 1p+8
        FISHEYECALIBRATE_MODE_TWO_EPTZ_REGION_WITH_ORIGINAL,		// 1F+2
        FISHEYECALIBRATE_MODE_FOUR_EPTZ_REGION_WITH_ORIGINAL,		// 1F+4
        FISHEYECALIBRATE_MODE_DOUBLE_PANORAMA_WITH_ORIGINAL,		// 1F+2p
        FISHEYECALIBRATE_MODE_FOUR_EPTZ_REGION_WITH_PANORAMA,		// 1p(F)+4
        FISHEYECALIBRATE_MODE_TWO_EPTZ_REGION,		                // 2????
        FISHEYECALIBRATE_MODE_SINGLE,								// ??????
        FISHEYECALIBRATE_MODE_FOUR_EPTZ_REGION,						// 4????
        FISHEYECALIBRATE_MODE_USER_DEFINED,				    		// ????????
        FISHEYECALIBRATE_MODE_PHONE,								// ?????
        FISHEYECALIBRATE_MODE_ORIGINAL_PLUS_ONE_EPTZ_REGION,		// 1+1
        FISHEYECALIBRATE_MODE_ONE_EPTZ_REGION,						// 1????
        FISHEYECALIBRATE_MODE_SEMI_SPHERE,							// ???
        FISHEYECALIBRATE_MODE_CYLINDER,								// ???
        FISHEYECALIBRATE_MODE_LITTLE_PLANET,						// §³????
        FISHEYECALIBRATE_MODE_DOUBLE_SPHERE,						// ????
        FISHEYECALIBRATE_MODE_DOUBLE_CYLINDER,						// ?????
        FISHEYECALIBRATE_MODE_DOUBLE_360,

        FISHEYECALIBRATE_MODE_NUM
}FISHEYE_CALIBRATMODE;

typedef enum
{
        FISHEYEEPTZ_CMD_INVALID = 0,
        FISHEYEEPTZ_CMD_ZOOM_IN = 1,						// ???
        FISHEYEEPTZ_CMD_ZOOM_OUT,							// ??§³
        FISHEYEEPTZ_CMD_UP,									// ???????
        FISHEYEEPTZ_CMD_DOWN,								// ???????
        FISHEYEEPTZ_CMD_LEFT,								// ???????
        FISHEYEEPTZ_CMD_RIGHT,								// ???????
        FISHEYEEPTZ_CMD_ROTATE_CLOCKWISE_AUTO,				// ??????????
        FISHEYEEPTZ_CMD_ROTATE_ANTICLOCKWISE_AUTO,			// ???????????
        FISHEYEEPTZ_CMD_STOP,								// ??
        FISHEYEEPTZ_CMD_SHOW_REGION,						// ??????
        FISHEYEEPTZ_CMD_EXIT_SHOW_REGION,					// ?????????
        FISHEYEEPTZ_CMD_DEFAULT,						    // ??????
        FISHEYEEPTZ_CMD_ORIGIN_ROTATE,						// ????

        FISHEYEEPTZ_CMD_SET_CUR_REGION = 0x20,              // ????????????¦Ë?????
        FISHEYEEPTZ_CMD_GET_CUR_REGION,                     // ???????????¦Ë?????
        FISHEYEEPTZ_CMD_IS_IN_PANORAMA_REGION,              // ??????????????????????????
        FISHEYEEPTZ_CMD_TAP_VIEW,							// ??????¦Ë??,??????
        FISHEYEEPTZ_CMD_SET_FOCUS,	 				        // ???????¦Ë?????
        FISHEYEEPTZ_CMD_GET_FOCUS,							// ???????¦Ë?????

        FISHEYEEPTZ_CMD_PTZ_CALI,							// ??????????
        FISHEYEEPTZ_CMD_GET_PTZ_RLT,						// ?????????????¦Ë???
        FISHEYEEPTZ_CMD_NUM
}FISHEYE_EPTZCMD;

typedef enum
{
        FISHEYE_SETPARAM,	// ???¨°???
        FISHEYE_GETPARAM	// ???????
}FISHEYE_OPERATETYPE;

typedef enum
{
        /* ¨¿?????? */
        IPCTYPE_200WN				= 0,	//
        IPCTYPE_130WN				= 1,
        IPCTYPE_D1WN				= 2,
        IPCTYPE_100WN				= 3,
        IPCTYPE_FE					= 4,	// ????

        //????????
        SPCTYPE_D6501				= 100,	// sony??§à65????
        HSPCTYPE_D6A2030E			= 101,	// ????§à2030E??6A????
        HSPCTYPE_D65A2030E			= 102	// ????§à2030E??65A????
}CAM_TYPE;

/* ??????? */
typedef enum
{
        LENTYPE_NORM				= 0,	// ????ÇÖ?
        LENTYPE_Lens0361 			= 1,	// 3.6????¨¿?????
        LENTYPE_Lens2880			= 2,	// 130?????¨¿?????
        LENTYPE_Lens0362 			= 3,	// 3.6????¨¿?????
        LENTYPE_Lens0401 			= 4,	// 4.0????¨¿?????

        LENTYPE_TEST1				= 100	// ?????¨°???
}LEN_TYPE;

typedef struct
{
        int w;
        int h;
}FISHEYE_SIZE;

typedef struct
{
        short x;
        short y;
}FISHEYE_POINT2D;

typedef struct
{
        FISHEYE_MOUNTMODE     subMountMode;			    // ??????????, ?????????§µ????????????????, ?????§¹
        FISHEYE_CALIBRATMODE  subCalibrateMode;	        // ?????§µ????, ?????????§µ????????????????, ?????§¹
        FISHEYE_SIZE          imgOutput;                // ??????????????
        FISHEYE_POINT2D       upperLeft;                // ????????
        int					  reserved[3];				// ???????
}FISHEYE_SUBMODE;

typedef struct
{
        FISHEYE_SIZE          mainShowSize;		        // ???????, ?????????, 4:3, 16:9??, ??????????????????????????????????????????????
        FISHEYE_SIZE          floatMainShowSize;		// ?????buffer??????????????????????????????????????????????????, ???????????????1:1??????????????????????16:9
        FISHEYE_SIZE          imgOutput;                // ????????????(?????), ?????§µ???????????????????????, ??????????????
        FISHEYE_SUBMODE*	  subMode;                  // ???????, ?????§µ???????????????????????, ??????????????
        int		              subModeNum;               // ??????, ?????§µ???????????????????????, ??????????????
        int                   outputSizeRatio;		    // ???????, §µ????????????????,Q8???,??¦¶0-256, 256??????????????????
        int                   reserved[1];				// ???????
}FISHEYE_OUTPUTFORMAT;

typedef struct
{
        int x;
        int y;
        int hAngle;
        int vAngle;
        int available;
        int reserved[3];
}FISHEYE_REGIONPARAM;

typedef struct
{
        FISHEYE_REGIONPARAM   regionParam[9];
        int              circularOffset;
        int              panoramaOffset;
        int              useRegionParam;           // ?1???????§¹??????????§Ô????????§Ò????????????0
        int              reserved[1];
}FISHEYE_MODEINITPARAM;

typedef struct
{
        /*????????*/
        int zoom_type;							// ??????????----???????????????????????§³????????
        int hcam_wax;							// ??????????????????x??????
        int hcam_way;							// ??????????????????y???????
        int hcam_wmul;							// ??????????????????????
        int cfg_type;							// ???¡Â????????1????????¨°??????,1????¨°??????¡Â????0??????õô???????¡Â??

        /* ?????????? */
        /* ??????? */
        int prm_re;								// ????
        int prm_mul;							// ??????
        int prm_dx;								// x???????
        int prm_dy;								// y???????
        int prm_cw;								// CMOS?????????????
        int prm_ch;								// CMOS???????????

        /* ??????????????????????cfg_type?0?????¨°???????§¹??,???130???130??¨¿????200W65???? */
        LEN_TYPE mlen_type;						// ?????????????
        CAM_TYPE mcam_type;						// ??????????
        CAM_TYPE hcam_type;						// ??????????

        /* ???????? */
        int himg_width;                         // ???????????
        int himg_height;                        // ???????????
        int prm_fax;                            // ???????????

        /* ????????? */
        /* ?????????? */
        int mcam_fc;							// ??????§¹????
        int mcam_cw;							// ?????????
        int mcam_ch;							// ?????????
        int cam_height;                         // ??????????????????????¦Ä????
        int prm_ma;								// ????????

        /* ?????????? */
        /* ???????? */
        int prm_hw;								// CMOS??
        int prm_hh;								// CMOS??
        int prm_fo;								// ??§¹????
        int prm_ca;								// ???????
        int prm_mmul;							// ????????
}MHFPTZ_CONFIGPARAM;

typedef struct
{
        FISHEYE_SIZE     mainStreamSize;		    // ????????????????????????????????????????????????????????????
        int              originX;					// ????????????????????????, ???????0-8192?????
        int              originY;					// ?????????????????????????, ???????0-8192?????
        int              radius;					// ?????????????????, ???????0-8192?????
        int              lensDirection;		        // ??????, Q7???, ??¦¶0-360*128, ??????0
        FISHEYE_MOUNTMODE     mainMountMode;		// ???????
        FISHEYE_CALIBRATMODE  mainCalibrateMode;	// ?????§µ????
        FISHEYE_MODEINITPARAM modeInitParam;        // ?????????????????????????????????§Ý??????????¦Å???,
        FISHEYE_OUTPUTFORMAT *outputFormat;         // ??????????
        MHFPTZ_CONFIGPARAM   *configParam;          // ???????????¨°???
        int              enableAutoContrast;        // ???????????, 0???, 1????, ?¨´?????????????, ???????????????????
        int              alphaHistogram;            // ????IIR???0-255, ???128, ?????¦Ï?????
        int              alphaGray;                 // ??????????0-255, ???245, ??????????
        FISHEYE_SIZE     captureSize;		        // ??????????????????
        int              mhfptzIndex;               // IN ????????????????0,1,2....
        int              reserved[1];				// ???????
}FISHEYE_OPTPARAM;

typedef struct
{
        FISHEYE_EPTZCMD   ePtzCmd;			// ??????????????FISHEYE_EPtzCmd????
        int          winId;				    // ?????eptz??????????????winId?0?????????????
        int          arg1;
        int          arg2;
        int          arg3;
        int          arg4;
        int          arg5;
        int          arg6;
        int          reserved0[6];			   // ???????
        void*        pParam;                   // ????????
        void*        pResult;
        void*        pArg;

        int          reserved1[7];			   // ???????
}FISHEYE_EPTZPARAM;

/**
 * ?????????????????????????fisheye.dll??
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StartFisheye(LONG nPort);

/**
 * ????/????????????
 *
 * @param[in] nPort ?????
 * @param[in] operatetype ????????
 * @param[in/out] pOptParam ???????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_OptFisheyeParams(LONG nPort, FISHEYE_OPERATETYPE operatetype, FISHEYE_OPTPARAM* pOptParam);

/**
 * ???????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] hDestWnd ??????????
 * @param[in] pOptParam ????????????????????
 * @param[in] bEnable ??????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_FisheyeSecondRegion(LONG nPort, HWND hDestWnd, FISHEYE_OPTPARAM* pOptParam, BOOL bEnable);

/**
 * ????eptz(????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in/out] pEptzParam ???????
 * @param[in] bSecondRegion ??????????????????????1????????0
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_FisheyeEptzUpdate(LONG nPort, FISHEYE_EPTZPARAM* pEptzParam, BOOL bSecondRegion);

/**
 * ????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StopFisheye(LONG nPort);

/**
 * ????????????????
 *
 * @param[in] nPort ?????
 * @param[in] byCorrectMode ??????
 * @param[in] wRadius ??
 * @param[in] wCircleX ????????
 * @param[in] wCircleY ?????????
 * @param[in] widthRatio ??????
 * @param[in] heightRatio ?????
 * @param[in] gain ????
 * @param[in] denoiseLevel ???????
 * @param[in] InstallStyle ?????????
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK* fFishEyeInfoFun)(
        LONG nPort,
        BYTE byCorrectMode,
        WORD wRadius,
        WORD wCircleX,
        WORD wCircleY,
        UINT widthRatio,
        UINT heightRatio,
        BYTE gain,
        BYTE denoiseLevel,
        BYTE installStyle,
        void* pUserData );

/**
 * ??????????????????
 *
 * @param[in] nPort ?????
 * @param[out] pFishEyeInfoFun ??????????????????????NULL
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetFishEyeInfoCallBack(LONG nPort, fFishEyeInfoFun pFishEyeInfoFun, void* pUserData);

/************************************************************************/
//> ??
/************************************************************************/

/**
 * ??????BMP?????????????????PLAY_SetDisplayCallBack??????????
 * ??????????????????????????????????????????????????????
 * ??(????)???????????§ß?????????????????????????????????PLAY_
 * CatchPic????????????????????????????????????????????
 * ??????????(????????)??????PLAY_CatchPic????????????????
 * ??????????????????PLAY_SetDisplayCallBack??
 *
 * @param[in] nPort ?????
 * @param[in] sFileName ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_CatchPic(LONG nPort,char* sFileName);

/**
* ???????????????????????PLAY_SetDisplayCallBack??????????
* ??????????????????????????????????????????????????????
* ??(????)???????????§ß?????????????????????????????????PLAY_
* CatchPicEx????????????????????????????????????????????
* ??????????(????????)??????PLAY_CatchPicEx????????????????
* ??????????????????PLAY_SetDisplayCallBack??
 * @param[in] nPort ?????
 * @param[in] sFileName ?????
 * @param[in] ePicfomat  ?????????tPicFormats
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_CatchPicEx(LONG nPort,char* sFileName,tPicFormats ePicfomat);

/**
 * ????????BMP?????
 *
 * @param[in] pBuf ??????????
 * @param[in] nSize ????????§³
 * @param[in] nWidth ???????
 * @param[in] nHeight ??????
 * @param[in] nType ???????????T_YV12??T_UYVY
 * @param[in] sFileName ????????????????????BMP???????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_ConvertToBmpFile(char * pBuf,LONG nSize,LONG nWidth,LONG nHeight,LONG nType, char *sFileName);

/*
 * ????????JPEG?????
 *
 * @param[in] pYUVBuf ??????????
 * @param[in] nWidth ???????
 * @param[in] nHeight ??????
 * @param[in] YUVtype YUV???????????T_YV12??T_UYVY
 * @param[in] quality ?????????????¦¶(0, 100]
 * @param[in] sFileName ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_ConvertToJpegFile(char *pYUVBuf, LONG nWidth, LONG nHeight, int YUVtype, int quality, char *sFileName);

/**
 * ??BMP?????
 *
 * @param[in] nPort ?????
 * @param[in] pBmpBuf ????BMP?????????????????????????????§³??bmp ?????§³??
 *               ?????§³??sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER)+w*h*4??
 *        ????w??h???????????
 * @param[in] dwBufSize ????????§³
 * @param[out] pBmpSize ??????????bmp?????§³
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetPicBMP(LONG nPort, PBYTE pBmpBuf, DWORD dwBufSize, DWORD* pBmpSize);

/**
 * ??BMP?????
 *
 * @param[in] nPort ?????
 * @param[in] pBmpBuf   ????BMP?????????????????????????????§³??bmp ?????§³??
 *   ?????§³??sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER)+w*h*4??
 *   ????w??h????????????
 * @param[in] dwBufSize ????????§³
 * @param[out] pBmpSize ??????????bmp?????§³
 * @param[in] nWidth ?????bmp???
 * @param[in] nHeight ?????bmp???
 * @param[in] nRgbType ???RGB??? 0??RGB32??1??RGB24??
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetPicBMPEx(LONG nPort, PBYTE pBmpBuf, DWORD dwBufSize, DWORD* pBmpSize, LONG nWidth, LONG nHeight, int nRgbType);

/**
 * ??JPEG?????
 *
 * @param[in] nPort ?????
 * @param[in] pJpegBuf ????JPEG?????????????????????????????§³??JPEG?????§³??
         ?????§³??w*h*3/2??????w??h???????????
 * @param[in] dwBufSize ????????§³
 * @param[out] pJpegSize ??????????JPEG?????§³
 * @param[in] quality JPEG??????????????????¦¶?(0,100]
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetPicJPEG(LONG nPort, PBYTE pJpegBuf, DWORD dwBufSize, DWORD* pJpegSize, int quality);

/**
 * ??TIFF?????
 *
 * @param[in] nPort ?????
 * @param[in] pTiffBuf ????TIFF?????????????????????????????§³??tiff?????§³??
   ?????§³??w*h*3+1024??
   ????w??h???????????
 * @param[in] dwBufSize ????????§³
 * @param[out] pTiffSize ??????????TIFF?????§³
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetPicTIFF(LONG nPort, PBYTE pTiffBuf, DWORD dwBufSize, DWORD* pTiffSize);

/**
 * ??????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] sFileName ?????
 * @param[in] lTargetWidth ????????????
 * @param[in] lTargetHeight ???????????
 * @param[in] ePicfomat ???????????tPicFomats
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_CatchResizePic(LONG nPort, char* sFileName, LONG lTargetWidth, LONG lTargetHeight, tPicFormats ePicfomat);

/************************************************************************/
//> ??????
/************************************************************************/

/*
 *??????????
 *
 * @param[in] nPort ?????
 * @param[in] hDc OffScreen?????õô??????
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK* fDrawCBFun)(LONG nPort,HDC hDc, void* pUserData);

/*
 * ???????????????????????????device context??????????????DC????(??????)??
 * ???????????????DC????????????DC?????????????DC??????DirectDraw??
 * ??Off-Screen??????DC??????????????overlay?????????????§¹???????????
 * ??????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[out] DrawFun ??????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_RigisterDrawFun(LONG nPort, fDrawCBFun DrawCBFun, void* pUserData);

/*
 *??????????
 *
 * @param[in] nPort ?????
 * @param[in] nReginNum ??????????????¦¶[0,(MAX_DISPLAY_WND-1)]??????nRegionNum?0??
 *   ?????????????????????????§³?
 * @param[in] hDc OffScreen?????õô??????
 * @param[in] pUserData ????????????
 */
typedef void (CALLBACK* fDrawCBFunEx)(LONG nPort,LONG nReginNum,HDC hDc, void* pUserData);

/*
 * ?????????????????????????????????(HDC)??????DC?????????????DC??
 * ????DirectDraw????Off-Screen??????DC??????????????overlay????
 * ?????????§¹??overlay?????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nReginNum ??????????????¦¶[0,(MAX_DISPLAY_WND-1)]??????nRegionNum?0??
 *   ??????????????????????????
 * @param[out] DrawFunEx ??????????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_RigisterDrawFunEx(LONG nPort, LONG nReginNum, fDrawCBFunEx DrawFunEx, void* pUserData);

/************************************************************************/
//> ?????????
/************************************************************************/

/*
 * ???????
 *
 * @param[in] nPort ???????
 * @param[in] sFileName ???¦Ë??
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StartPrepareRecord(LONG nPort,const char* pFileName);

/*
 * ??????
 *
 * @param[in] nPort ???????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StopPrepareRecord(LONG nPort);

/*
 * ????????????????????????????PLAY_Play??????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] sFileName ?????
 * @param[in] idataType ??DATA_RECORD_TYPE
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
typedef enum
{
        DATA_RECORD_ORIGINAL = 0,     // ??????????
        DATA_RECORD_AVI,              // ???AVI
        DATA_RECORD_ASF,              // ???ASF
        DATA_RECORD_ORIGINAL_SEGMENT, // ????¦Å????????
        DATA_RECORD_RESIZE_AVI,       // ????????????AVI?????PLAY_ResolutionScale???????
        DATA_RECORD_MP4,              // ???MP4
        DATA_RECORD_RESIZE_MP4,       // ????????????MP4?????PLAY_ResolutionScale???????
        DATA_RECORD_MP4_NOSEEK,       // ??????§ÕMP4
    DATA_RECORD_RESIZE_MP4_NOSEEK,// ???????????????§ÕMP4?????PLAY_ResolutionScale???????
        DATA_RECORD_TS,
    DATA_RECORD_PS,               // ???PS???
}DATA_RECORD_TYPE;
PLAYSDK_API BOOL CALLMETHOD PLAY_StartDataRecord(LONG nPort, char *sFileName, int idataType);

/*
 * ????????????????????PLAY_StartDataRecord????PLAY_StartDataRecordEx????????¨¢?
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ??????
 * @param[in] nSize ??§³
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_WriteData(LONG nPort, PBYTE pBuf,DWORD nSize);

/*
 * ?????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StopDataRecord(LONG nPort);

/*
 * ??????? AVIConvertCallback??
 *
 * @param[in] nPort ?????
 * @param[in] lMediaChangeType AVI_MEDIACHANGE_FRAMERATE????????AVI_MEDIACHANGE_RESOLUTION??????????
 * @param[in] pUserData ????????????
 * @param[out] pIsNewFile TRUE ????????FALSE ????¦²????????
 * @param[out] sNewFileName ???????????????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
typedef void (CALLBACK* fAVIConvertCallback)(LONG nPort, LONG lMediaChangeType, void* pUserData, BOOL *pIsNewFile, char *sNewFileName);

/*
 * ???AVI?????????AVI??????????
 *
 * @param[in] nPort ?????
 * @param[in] sFileName ?????
 * @param[out] pAVIFunc ???????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StartAVIConvert(LONG nPort, char *sFileName, fAVIConvertCallback pAVIFunc, void* pUserData);

/*
 * ??AVI?????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_StopAVIConvert(LONG nPort);

/************************************************************************/
//> ???????????
/************************************************************************/

/*
 * ?????????(Windows??)?? PLAY_Play????????§¹??
 *
 * @param[in] nPort ?????
 * @param[in] decodeType ??????????????H264?? Hevc)
 * @param[in] renderType ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetEngine(LONG nPort,DecodeType decodeType,RenderType renderType);

/*
 * ??????????????????¨®???????????§¹???????CPU??????????????¡¤???????
 * ????????????????????CPU??????????¡¤??????????¡¤???¨®????????
 * ?????????§¹????
 *
 * @param[in] nPort ?????
 * @param[in] bHighQuality ?TRUE(1)?????????????FALSE(0)???????(????)
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetPicQuality(LONG nPort,BOOL bHighQuality);

/*
 * ????????????
 *
 * @param[in] nPort ?????
 * @param[out] bHighQuality ??????????TRUE???????????FALSE?????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_GetPictureQuality(LONG nPort,BOOL *bHighQuality);

/*
 * ??????????????????????PLAY_Play?????????????????????????¨¢?
 * ?????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] bEnable TRUE??????????FALSE????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_VerticalSyncEnable(LONG nPort, BOOL bEnable);

/*
 * ?????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] bEnable ????PLAY_STRATEGE_E????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
typedef enum _PLAY_STRATEGE
{
        PLAY_THROW_FRAME_NO = 0,						// ?????
        PLAY_THROW_FRAME_FLAG_HIGHT = 1,				// ??????????????1080P????4????(??)????????[1080P,720P]????8????(??)????????§³??720P????16????(??)??????
        PLAY_THROW_FRAME_FLAG_ALL = 2,					// ????I?????
        PLAY_THROW_FRAME_FLAG_ADAPTION = 3,				// ????????????????
        PLAY_THROW_FRAME_FLAG_ADAPTION_LOW_CPU = 4,		// ????????????????????cpu?????
} PLAY_STRATEGE_E;
PLAYSDK_API BOOL CALLMETHOD PLAY_EnableLargePicAdjustment(LONG nPort, int bEnable);

/*
 * ??????????????
 *
 * @param[in] nPort ?????
 * @param[in] nNum ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDecodeThreadNum(LONG nPort, DWORD nNum);

/*
 * ??????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] nStrategyType
 *				16: ?????????????frame???????????????
 *               8: ??????????????????????????§¿???????????
 *				 0 : ??????????????????????????§¿??????????????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDecodeStrategy(LONG nPort, int nStrategyType);

/*
 * ??????????????????Windows??
 *
 * @param[in] nPort ?????
 * @param[in] bEnable TRUE?????????????FALSE???????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_AntiAliasEnable(LONG nPort, BOOL bEnable);

/************************************************************************/
//> ???????
/************************************************************************/

/*
 * ?????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] bTrue TRUE?????? FALSE?????
 * @param[in] nReserve ????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_RenderPrivateData(LONG nPort, BOOL bTrue, LONG nReserve);

/*
 * ???????? PLAY_SetDataCallBack??
 *
 * @param[in] nPort ?????
 * @param[in] pBuf ???????????????
 * @param[in] nSize  ?????§³
 * @param[in] pUserData  ????????????
 */
typedef void (CALLBACK* fDataCBFun)(LONG nPort,char * pBuf,LONG nSize, void* pUserData);

/*
 * ????????????????????????????????????????????
 *
 * @param[in] nPort ?????
 * @param[out] pDataCBFun ???????
 * @param[in] pUserData ????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetDataCallBack(LONG nPort, fDataCBFun pDataCBFun, void* pUserData);

/*
 * IVS?????????????
 *
 * @param[in] pIVSBuf ?????????(json???????????????)?????????????????????pIVSBuf?IVS Object????????????????
 * @param[in] nIVSType ?????????????,????IVS_TYPE
 *			???IVSINFOTYPE_RAWDATA????????json????
 *			???IVSINFOTYPE_TRACK???????IVS object??????? SP_IVS_OBJ_EX??
 *			???IVSINFOTYPE_TRACK_EX_B0???????IVS object??????? SP_IVS_COMMON_OBJ??
 * @param[in] nIVSBufLen ????????????(json???????????????)??
 *			  ???????????????????nIVSBufLen?IVS Object????????????IVS object??????????IVS object????????type??????????
 * @param[in] nFrameSeq ?????id
 * @param[in] pReserved ????????
 * @param[in] pUserData ?????????
 */
/* IVS???? */
typedef enum _IVS_TYPE
{
        IVSINFOTYPE_PRESETPOS			= 1,
        IVSINFOTYPE_MOTINTRKS			= 2,
        IVSINFOTYPE_MOTINTRKS_EX		= 3,
        IVSINFOTYPE_LIGHT				= 4,
        IVSINFOTYPE_RAWDATA				= 5,   // jason????
        IVSINFOTYPE_TRACK				= 6,   // ??????????
        IVSINFOTYPE_TRACK_EX_B0			= 7,   // ??????????????
        IVSINFOTYPE_MOTIONFRAME			= 9,

        IVSINFOTYPE_VIDEO_CONCENTRATION = 10,
        IVSINFOTYPE_OVERLAY_PIC			= 11,	// ???????
        IVSINFOTYPE_OSD_INFO			= 12,	// OSD?????
        IVSINFOTYPE_GPS_INFO			= 13,  // GPS?????
        IVSINFOTYPE_TAGGING_INFO		= 14,  // ????????????????????(0x13)
        IVSINFOTYPE_TRACK_A1			= 15,  // NVR??????????
        IVSINFOTYPE_DATA_WITH_LARGE_AMOUNT = 16,
    IVSINFOTYPE_TRACK_A1_EX         = 17,  // NVR??????????(???)
        IVSINFOTYPE_DATA_WITH_WATER_LEVEL_MONITOR = 18, //?¦Ë?????¦Ë??????(0x17)
        IVSINFOTYPE_INTELFLOW			= 19,  // ?????????
        IVSINFOTYPE_DATA_WITH_SOUND_DECIBEL = 20,	//????????????????(0x18)
        IVSINFOTYPE_DATA_WITH_SMART_MOTION = 21,	//???????????(0x19)
}IVS_TYPE;

/* IVSINFOTYPE_OVERLAY_PIC????????? */
typedef struct
{
        unsigned char nOverLayPicPurpose;	// ?????????
        unsigned char nOverLayPicAction;	// ??????????
        unsigned char nOverLayPicCodeFormat;// ?????????????
}OVERLAY_PIC_INFO;

/* IVSINFOTYPE_OSD_INFO????????? */
typedef struct
{
        unsigned short nOsdTopLeftCornercoordinateX; // ????????????????x????
        unsigned short nOsdTopLeftCornercoordinateY; // ????????????????y????
        unsigned char  nOsdWordSize;				 // ???(?????§³)
        unsigned char  nOsdWordAlignment;			 // ????????
        unsigned char  reverse[6];
        unsigned int   nOsdRgbaValue;				 // ??????
}OSD_DATA_INFO;

typedef void (CALLMETHOD *fIVSInfoCallbackFunc)(char* pIVSBuf, LONG nIVSType, LONG nIVSBufLen, LONG nFrameSeq, void* pReserved, void* pUserData);

/*
 * IVS????????????
 *
 * @param[in] nPort ?????
 * @param[out] pFunc ???????????
 * @param[in] pUserData ?????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetIVSCallBack(LONG nPort, fIVSInfoCallbackFunc pFunc, void* pUserData);

/*
 * GPS????????????
 *
 * @param[in] pBuf ?????????
 * @param[in] nLen ?????????
 * @param[in] pUserData ?????
 * @return int ??????
 */
typedef int (CALLBACK *fGPSInfoCallbackFunc)(char* pBuf, LONG nLen, void* pUserData);

/*
 * GPS????????????
 *
 * @param[in] nPort ?????
 * @param[out] pFunc ???????
 * @param[in] pUserData ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetGPSCallBack(LONG nPort, fGPSInfoCallbackFunc pFunc, void* pUserData);

/* ?????????? */
typedef enum _STATISTIC_TYPE
{
        TYPE_UNUSE			= 0,		// ¦Ä???????
        INPUT_DATA_INTERVAL,			// ?????????????,????1??????????????2????????
        PRASE_VIDEO_INTERVAL,			// ??????????????????1??????????????2¦Ë???
        VIDEO_PTS_INTERVAL,				// ???pts??????????1??????????????2????
        DECODE_VIDEO_TIME,				// ????????????????1????????????2????
        PLAY_VIDEO_INTERVAL,			// ?????????????????1??????????????2????
        RENDER_VIDEO_TIME,				// ???????????????1??????
        VIDEO_DECODE_ERROR = 1000,		// ???????????????1?????ÈÉ????2????
}STATISTIC_TYPE;

/* ???????????? */
typedef struct statistic_info
{
        LONG			nPort;				// ?????
        LONG			nStatisticType;		// ???????
        LONGLONG		nParam1;			// ????1
        LONGLONG		nParam2;			// ????2
        char			szReserved[16];		// ????????
} STATISTIC_INFO, *PSTATISTIC_INFO;

/*
 * ???????????????
 *
 * @param[in] pStatisticData ???????
 * @param[in] pUserData ?????????
 * @return int ??????
 */
typedef int (CALLBACK *fStatisticCallbackFunc)(PSTATISTIC_INFO pStatisticData, void* pUserData);

/*
 * ???????????????
 *
 * @param[in] nPort,?????
 * @param[out] pFunc ???????
 * @param[in] pUserData ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetStatisticCallBack(LONG nPort, fStatisticCallbackFunc pFunc, void* pUserData);


/************************************************************************/
//> ???????????
/************************************************************************/

/*
 * ???????????????§¹???????PLAY_GetLastErrorEx????
 *
 * @param[in] nPort,?????
 * @return DWORD???????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_GetLastError(LONG nPort);

/*
 * ??????????????????????
 *
 * @param[in] sFileName ?????
 * @return DWORD????????0?????????????
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_CreateFile(LPSTR sFileName);

/*
 * ?????????????????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_DestroyFile(LONG nPort);

/*
 * ???????????????????????
 *
 * @param[in] nBufPoolSize ?¨°??????§Õ??????????????????§³????¦¶??[SOURCE_BUF_MIN,SOURCE_BUF_MAX]
 * @return DWORD,??????0?????????????
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API DWORD CALLMETHOD PLAY_CreateStream(DWORD nBufPoolSize);

/*
 * ???????????????????????????????
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_DestroyStream(LONG nPort);

/*
 * ??PLAY_OneByOneBack??????????PLAY_OneByOneBack??
 *
 * @param[in] nPort ?????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_BackOne(LONG nPort);

/*
 * ???¡Â?????????????
 *
 * @param[in] nPort ?????
 * @param[in] hWnd ???????????
 * @param[in] nMsg ?????????????????????????????????????????hWnd???????????????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetEncChangeMsg(LONG nPort,HWND hWnd,UINT nMsg);

/*
 * ???????????????????????
 *
 * @param[in] nPort ?????
 * @param[in] hWnd ??????????
 * @param[in] nMsg ?????????????????????????????????????????hWnd?????????
 * @return BOOL?????????TRUE????????FALSE
 * @note ???????????????????PLAY_GetLastErrorEx???????????
 */
PLAYSDK_API BOOL CALLMETHOD PLAY_SetFileEndMsg(LONG nPort,HWND hWnd,UINT nMsg);

#ifdef __cplusplus
}
#endif

#endif
